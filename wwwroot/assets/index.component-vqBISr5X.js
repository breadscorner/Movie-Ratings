var _e=(s,e,t)=>{if(!e.has(s))throw TypeError("Cannot "+t)};var h=(s,e,t)=>(_e(s,e,"read from private field"),t?t.call(s):e.get(s)),_=(s,e,t)=>{if(e.has(s))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(s):e.set(s,t)},m=(s,e,t,n)=>(_e(s,e,"write to private field"),n?n.call(s,t):e.set(s,t),t);var b=(s,e,t)=>(_e(s,e,"access private method"),t);import{S as Je,s as pe,a as Ge,i as xe,b as Ae,t as Ye,f as Ze,c as et,d as Me,n as qe,r as I,u as tt,j as $}from"./index-S9cZONxc.js";import{s as nt}from"./utils-1RRThafF.js";var E,g,Y,v,H,B,x,Z,F,q,O,U,M,z,W,X,ee,me,te,we,ne,be,se,ye,oe,Se,re,Ce,ie,ve,le,ze,Fe,st=(Fe=class extends Je{constructor(e,t){super();_(this,W);_(this,ee);_(this,te);_(this,ne);_(this,se);_(this,oe);_(this,re);_(this,ie);_(this,le);_(this,E,void 0);_(this,g,void 0);_(this,Y,void 0);_(this,v,void 0);_(this,H,void 0);_(this,B,void 0);_(this,x,void 0);_(this,Z,void 0);_(this,F,void 0);_(this,q,void 0);_(this,O,void 0);_(this,U,void 0);_(this,M,void 0);_(this,z,new Set);this.options=t,m(this,E,e),m(this,x,null),this.bindMethods(),this.setOptions(t)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(h(this,g).addObserver(this),He(h(this,g),this.options)?b(this,W,X).call(this):this.updateResult(),b(this,se,ye).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return Ee(h(this,g),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return Ee(h(this,g),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,b(this,oe,Se).call(this),b(this,re,Ce).call(this),h(this,g).removeObserver(this)}setOptions(e,t){const n=this.options,o=h(this,g);if(this.options=h(this,E).defaultQueryOptions(e),pe(n,this.options)||h(this,E).getQueryCache().notify({type:"observerOptionsUpdated",query:h(this,g),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),b(this,ie,ve).call(this);const r=this.hasListeners();r&&Oe(h(this,g),o,this.options,n)&&b(this,W,X).call(this),this.updateResult(t),r&&(h(this,g)!==o||this.options.enabled!==n.enabled||this.options.staleTime!==n.staleTime)&&b(this,ee,me).call(this);const i=b(this,te,we).call(this);r&&(h(this,g)!==o||this.options.enabled!==n.enabled||i!==h(this,M))&&b(this,ne,be).call(this,i)}getOptimisticResult(e){const t=h(this,E).getQueryCache().build(h(this,E),e),n=this.createResult(t,e);return rt(this,n)&&(m(this,v,n),m(this,B,this.options),m(this,H,h(this,g).state)),n}getCurrentResult(){return h(this,v)}trackResult(e){const t={};return Object.keys(e).forEach(n=>{Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:()=>(h(this,z).add(n),e[n])})}),t}getCurrentQuery(){return h(this,g)}refetch({...e}={}){return this.fetch({...e})}fetchOptimistic(e){const t=h(this,E).defaultQueryOptions(e),n=h(this,E).getQueryCache().build(h(this,E),t);return n.isFetchingOptimistic=!0,n.fetch().then(()=>this.createResult(n,t))}fetch(e){return b(this,W,X).call(this,{...e,cancelRefetch:e.cancelRefetch??!0}).then(()=>(this.updateResult(),h(this,v)))}createResult(e,t){var $e;const n=h(this,g),o=this.options,r=h(this,v),i=h(this,H),a=h(this,B),d=e!==n?e.state:h(this,Y),{state:u}=e;let{error:k,errorUpdatedAt:K,fetchStatus:V,status:A}=u,Pe=!1,D;if(t._optimisticResults){const R=this.hasListeners(),ge=!R&&He(e,t),Xe=R&&Oe(e,n,t,o);(ge||Xe)&&(V=et(e.options.networkMode)?"fetching":"paused",u.dataUpdatedAt||(A="pending")),t._optimisticResults==="isRestoring"&&(V="idle")}if(t.select&&typeof u.data<"u")if(r&&u.data===(i==null?void 0:i.data)&&t.select===h(this,Z))D=h(this,F);else try{m(this,Z,t.select),D=t.select(u.data),D=Me(r==null?void 0:r.data,D,t),m(this,F,D),m(this,x,null)}catch(R){m(this,x,R)}else D=u.data;if(typeof t.placeholderData<"u"&&typeof D>"u"&&A==="pending"){let R;if(r!=null&&r.isPlaceholderData&&t.placeholderData===(a==null?void 0:a.placeholderData))R=r.data;else if(R=typeof t.placeholderData=="function"?t.placeholderData(($e=h(this,q))==null?void 0:$e.state.data,h(this,q)):t.placeholderData,t.select&&typeof R<"u")try{R=t.select(R),m(this,x,null)}catch(ge){m(this,x,ge)}typeof R<"u"&&(A="success",D=Me(r==null?void 0:r.data,R,t),Pe=!0)}h(this,x)&&(k=h(this,x),D=h(this,F),K=Date.now(),A="error");const ue=V==="fetching",de=A==="pending",fe=A==="error",De=de&&ue;return{status:A,fetchStatus:V,isPending:de,isSuccess:A==="success",isError:fe,isInitialLoading:De,isLoading:De,data:D,dataUpdatedAt:u.dataUpdatedAt,error:k,errorUpdatedAt:K,failureCount:u.fetchFailureCount,failureReason:u.fetchFailureReason,errorUpdateCount:u.errorUpdateCount,isFetched:u.dataUpdateCount>0||u.errorUpdateCount>0,isFetchedAfterMount:u.dataUpdateCount>d.dataUpdateCount||u.errorUpdateCount>d.errorUpdateCount,isFetching:ue,isRefetching:ue&&!de,isLoadingError:fe&&u.dataUpdatedAt===0,isPaused:V==="paused",isPlaceholderData:Pe,isRefetchError:fe&&u.dataUpdatedAt!==0,isStale:ke(e,t),refetch:this.refetch}}updateResult(e){const t=h(this,v),n=this.createResult(h(this,g),this.options);if(m(this,H,h(this,g).state),m(this,B,this.options),h(this,H).data!==void 0&&m(this,q,h(this,g)),pe(n,t))return;m(this,v,n);const o={},r=()=>{if(!t)return!0;const{notifyOnChangeProps:i}=this.options,a=typeof i=="function"?i():i;if(a==="all"||!a&&!h(this,z).size)return!0;const l=new Set(a??h(this,z));return this.options.throwOnError&&l.add("error"),Object.keys(h(this,v)).some(d=>{const u=d;return h(this,v)[u]!==t[u]&&l.has(u)})};(e==null?void 0:e.listeners)!==!1&&r()&&(o.listeners=!0),b(this,le,ze).call(this,{...o,...e})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&b(this,se,ye).call(this)}},E=new WeakMap,g=new WeakMap,Y=new WeakMap,v=new WeakMap,H=new WeakMap,B=new WeakMap,x=new WeakMap,Z=new WeakMap,F=new WeakMap,q=new WeakMap,O=new WeakMap,U=new WeakMap,M=new WeakMap,z=new WeakMap,W=new WeakSet,X=function(e){b(this,ie,ve).call(this);let t=h(this,g).fetch(this.options,e);return e!=null&&e.throwOnError||(t=t.catch(Ge)),t},ee=new WeakSet,me=function(){if(b(this,oe,Se).call(this),xe||h(this,v).isStale||!Ae(this.options.staleTime))return;const t=Ye(h(this,v).dataUpdatedAt,this.options.staleTime)+1;m(this,O,setTimeout(()=>{h(this,v).isStale||this.updateResult()},t))},te=new WeakSet,we=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(h(this,g)):this.options.refetchInterval)??!1},ne=new WeakSet,be=function(e){b(this,re,Ce).call(this),m(this,M,e),!(xe||this.options.enabled===!1||!Ae(h(this,M))||h(this,M)===0)&&m(this,U,setInterval(()=>{(this.options.refetchIntervalInBackground||Ze.isFocused())&&b(this,W,X).call(this)},h(this,M)))},se=new WeakSet,ye=function(){b(this,ee,me).call(this),b(this,ne,be).call(this,b(this,te,we).call(this))},oe=new WeakSet,Se=function(){h(this,O)&&(clearTimeout(h(this,O)),m(this,O,void 0))},re=new WeakSet,Ce=function(){h(this,U)&&(clearInterval(h(this,U)),m(this,U,void 0))},ie=new WeakSet,ve=function(){const e=h(this,E).getQueryCache().build(h(this,E),this.options);if(e===h(this,g))return;const t=h(this,g);m(this,g,e),m(this,Y,e.state),this.hasListeners()&&(t==null||t.removeObserver(this),e.addObserver(this))},le=new WeakSet,ze=function(e){qe.batch(()=>{e.listeners&&this.listeners.forEach(t=>{t(h(this,v))}),h(this,E).getQueryCache().notify({query:h(this,g),type:"observerResultsUpdated"})})},Fe);function ot(s,e){return e.enabled!==!1&&!s.state.dataUpdatedAt&&!(s.state.status==="error"&&e.retryOnMount===!1)}function He(s,e){return ot(s,e)||s.state.dataUpdatedAt>0&&Ee(s,e,e.refetchOnMount)}function Ee(s,e,t){if(e.enabled!==!1){const n=typeof t=="function"?t(s):t;return n==="always"||n!==!1&&ke(s,e)}return!1}function Oe(s,e,t,n){return t.enabled!==!1&&(s!==e||n.enabled===!1)&&(!t.suspense||s.state.status!=="error")&&ke(s,t)}function ke(s,e){return s.isStaleByTime(e.staleTime)}function rt(s,e){return!pe(s.getCurrentResult(),e)}var Qe=I.createContext(!1),it=()=>I.useContext(Qe);Qe.Provider;function ct(){let s=!1;return{clearReset:()=>{s=!1},reset:()=>{s=!0},isReset:()=>s}}var at=I.createContext(ct()),lt=()=>I.useContext(at),ht=(s,e)=>{(s.suspense||s.throwOnError)&&(e.isReset()||(s.retryOnMount=!1))},ut=s=>{I.useEffect(()=>{s.clearReset()},[s])},dt=({result:s,errorResetBoundary:e,throwOnError:t,query:n})=>s.isError&&!e.isReset()&&!s.isFetching&&n&&nt(t,[s.error,n]),ft=s=>{s.suspense&&typeof s.staleTime!="number"&&(s.staleTime=1e3)},gt=(s,e)=>(s==null?void 0:s.suspense)&&e.isPending,_t=(s,e,t)=>e.fetchOptimistic(s).catch(()=>{t.clearReset()});function pt(s,e,t){const n=tt(t),o=it(),r=lt(),i=n.defaultQueryOptions(s);i._optimisticResults=o?"isRestoring":"optimistic",ft(i),ht(i,r),ut(r);const[a]=I.useState(()=>new e(n,i)),l=a.getOptimisticResult(i);if(I.useSyncExternalStore(I.useCallback(d=>{const u=o?()=>{}:a.subscribe(qe.batchCalls(d));return a.updateResult(),u},[a,o]),()=>a.getCurrentResult(),()=>a.getCurrentResult()),I.useEffect(()=>{a.setOptions(i,{listeners:!1})},[i,a]),gt(i,l))throw _t(i,a,r);if(dt({result:l,errorResetBoundary:r,throwOnError:i.throwOnError,query:n.getQueryCache().get(i.queryHash)}))throw l.error;return i.notifyOnChangeProps?l:a.trackResult(l)}function mt(s,e){return pt(s,st,e)}class N extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class Ie extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class P extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class wt extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class bt extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class yt extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class Ue extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class St extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}class Ke{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class he{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var c;(function(s){s[s.Trace=0]="Trace",s[s.Debug=1]="Debug",s[s.Information=2]="Information",s[s.Warning=3]="Warning",s[s.Error=4]="Error",s[s.Critical=5]="Critical",s[s.None=6]="None"})(c||(c={}));class J{constructor(){}log(e,t){}}J.instance=new J;const Ct="8.0.0";class y{static isRequired(e,t){if(e==null)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class w{static get isBrowser(){return!w.isNode&&typeof window=="object"&&typeof window.document=="object"}static get isWebWorker(){return!w.isNode&&typeof self=="object"&&"importScripts"in self}static get isReactNative(){return!w.isNode&&typeof window=="object"&&typeof window.document>"u"}static get isNode(){return typeof process<"u"&&process.release&&process.release.name==="node"}}function G(s,e){let t="";return L(s)?(t=`Binary data of length ${s.byteLength}`,e&&(t+=`. Content: '${vt(s)}'`)):typeof s=="string"&&(t=`String data of length ${s.length}`,e&&(t+=`. Content: '${s}'`)),t}function vt(s){const e=new Uint8Array(s);let t="";return e.forEach(n=>{const o=n<16?"0":"";t+=`0x${o}${n.toString(16)} `}),t.substr(0,t.length-1)}function L(s){return s&&typeof ArrayBuffer<"u"&&(s instanceof ArrayBuffer||s.constructor&&s.constructor.name==="ArrayBuffer")}async function Ve(s,e,t,n,o,r){const i={},[a,l]=Q();i[a]=l,s.log(c.Trace,`(${e} transport) sending data. ${G(o,r.logMessageContent)}.`);const d=L(o)?"arraybuffer":"text",u=await t.post(n,{content:o,headers:{...i,...r.headers},responseType:d,timeout:r.timeout,withCredentials:r.withCredentials});s.log(c.Trace,`(${e} transport) request complete. Response status: ${u.statusCode}.`)}function Et(s){return s===void 0?new ae(c.Information):s===null?J.instance:s.log!==void 0?s:new ae(s)}class kt{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),this._subject.observers.length===0&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class ae{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${new Date().toISOString()}] ${c[e]}: ${t}`;switch(e){case c.Critical:case c.Error:this.out.error(n);break;case c.Warning:this.out.warn(n);break;case c.Information:this.out.info(n);break;default:this.out.log(n);break}}}}function Q(){let s="X-SignalR-User-Agent";return w.isNode&&(s="User-Agent"),[s,It(Ct,Tt(),Pt(),Rt())]}function It(s,e,t,n){let o="Microsoft SignalR/";const r=s.split(".");return o+=`${r[0]}.${r[1]}`,o+=` (${s}; `,e&&e!==""?o+=`${e}; `:o+="Unknown OS; ",o+=`${t}`,n?o+=`; ${n}`:o+="; Unknown Runtime Version",o+=")",o}function Tt(){if(w.isNode)switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}else return""}function Rt(){if(w.isNode)return process.versions.node}function Pt(){return w.isNode?"NodeJS":"Browser"}function We(s){return s.stack?s.stack:s.message?s.message:`${s}`}function Dt(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("could not find global")}function $t(s){return typeof fetch>"u"||w.isNode?(s._jar=new(require("tough-cookie")).CookieJar,typeof fetch>"u"?s._fetchType=require("node-fetch"):s._fetchType=fetch,s._fetchType=require("fetch-cookie")(s._fetchType,s._jar),!0):!1}function xt(s){return typeof AbortController>"u"?(s._abortControllerType=require("abort-controller"),!0):!1}function At(){return require("ws")}function Mt(){return require("eventsource")}class Ht extends he{constructor(e){super(),this._logger=e;const t={_fetchType:void 0,_jar:void 0};$t(t)?(this._fetchType=t._fetchType,this._jar=t._jar):this._fetchType=fetch.bind(Dt()),this._abortControllerType=AbortController;const n={_abortControllerType:this._abortControllerType};xt(n)&&(this._abortControllerType=n._abortControllerType)}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new P;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let n;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),n=new P});let o=null;if(e.timeout){const l=e.timeout;o=setTimeout(()=>{t.abort(),this._logger.log(c.Warning,"Timeout from HTTP request."),n=new Ie},l)}e.content===""&&(e.content=void 0),e.content&&(e.headers=e.headers||{},L(e.content)?e.headers["Content-Type"]="application/octet-stream":e.headers["Content-Type"]="text/plain;charset=UTF-8");let r;try{r=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:e.withCredentials===!0?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(l){throw n||(this._logger.log(c.Warning,`Error from HTTP request. ${l}.`),l)}finally{o&&clearTimeout(o),e.abortSignal&&(e.abortSignal.onabort=null)}if(!r.ok){const l=await Ne(r,"text");throw new N(l||r.statusText,r.status)}const a=await Ne(r,e.responseType);return new Ke(r.status,r.statusText,a)}getCookieString(e){let t="";return w.isNode&&this._jar&&this._jar.getCookies(e,(n,o)=>t=o.join("; ")),t}}function Ne(s,e){let t;switch(e){case"arraybuffer":t=s.arrayBuffer();break;case"text":t=s.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`);default:t=s.text();break}return t}class Ot extends he{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new P):e.method?e.url?new Promise((t,n)=>{const o=new XMLHttpRequest;o.open(e.method,e.url,!0),o.withCredentials=e.withCredentials===void 0?!0:e.withCredentials,o.setRequestHeader("X-Requested-With","XMLHttpRequest"),e.content===""&&(e.content=void 0),e.content&&(L(e.content)?o.setRequestHeader("Content-Type","application/octet-stream"):o.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const r=e.headers;r&&Object.keys(r).forEach(i=>{o.setRequestHeader(i,r[i])}),e.responseType&&(o.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{o.abort(),n(new P)}),e.timeout&&(o.timeout=e.timeout),o.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),o.status>=200&&o.status<300?t(new Ke(o.status,o.statusText,o.response||o.responseText)):n(new N(o.response||o.responseText||o.statusText,o.status))},o.onerror=()=>{this._logger.log(c.Warning,`Error from HTTP request. ${o.status}: ${o.statusText}.`),n(new N(o.statusText,o.status))},o.ontimeout=()=>{this._logger.log(c.Warning,"Timeout from HTTP request."),n(new Ie)},o.send(e.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class Ut extends he{constructor(e){if(super(),typeof fetch<"u"||w.isNode)this._httpClient=new Ht(e);else if(typeof XMLHttpRequest<"u")this._httpClient=new Ot(e);else throw new Error("No usable HttpClient found.")}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new P):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class T{static write(e){return`${e}${T.RecordSeparator}`}static parse(e){if(e[e.length-1]!==T.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(T.RecordSeparator);return t.pop(),t}}T.RecordSeparatorCode=30;T.RecordSeparator=String.fromCharCode(T.RecordSeparatorCode);class Wt{writeHandshakeRequest(e){return T.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if(L(e)){const a=new Uint8Array(e),l=a.indexOf(T.RecordSeparatorCode);if(l===-1)throw new Error("Message is incomplete.");const d=l+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(a.slice(0,d))),n=a.byteLength>d?a.slice(d).buffer:null}else{const a=e,l=a.indexOf(T.RecordSeparator);if(l===-1)throw new Error("Message is incomplete.");const d=l+1;t=a.substring(0,d),n=a.length>d?a.substring(d):null}const o=T.parse(t),r=JSON.parse(o[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[n,r]}}var f;(function(s){s[s.Invocation=1]="Invocation",s[s.StreamItem=2]="StreamItem",s[s.Completion=3]="Completion",s[s.StreamInvocation=4]="StreamInvocation",s[s.CancelInvocation=5]="CancelInvocation",s[s.Ping=6]="Ping",s[s.Close=7]="Close",s[s.Ack=8]="Ack",s[s.Sequence=9]="Sequence"})(f||(f={}));class Nt{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new kt(this,e)}}class jt{constructor(e,t,n){this._bufferSize=1e5,this._messages=[],this._totalMessageCount=0,this._waitForSequenceMessage=!1,this._nextReceivingSequenceId=1,this._latestReceivedSequenceId=0,this._bufferedByteCount=0,this._reconnectInProgress=!1,this._protocol=e,this._connection=t,this._bufferSize=n}async _send(e){const t=this._protocol.writeMessage(e);let n=Promise.resolve();if(this._isInvocationMessage(e)){this._totalMessageCount++;let o=()=>{},r=()=>{};L(t)?this._bufferedByteCount+=t.byteLength:this._bufferedByteCount+=t.length,this._bufferedByteCount>=this._bufferSize&&(n=new Promise((i,a)=>{o=i,r=a})),this._messages.push(new Lt(t,this._totalMessageCount,o,r))}try{this._reconnectInProgress||await this._connection.send(t)}catch{this._disconnected()}await n}_ack(e){let t=-1;for(let n=0;n<this._messages.length;n++){const o=this._messages[n];if(o._id<=e.sequenceId)t=n,L(o._message)?this._bufferedByteCount-=o._message.byteLength:this._bufferedByteCount-=o._message.length,o._resolver();else if(this._bufferedByteCount<this._bufferSize)o._resolver();else break}t!==-1&&(this._messages=this._messages.slice(t+1))}_shouldProcessMessage(e){if(this._waitForSequenceMessage)return e.type!==f.Sequence?!1:(this._waitForSequenceMessage=!1,!0);if(!this._isInvocationMessage(e))return!0;const t=this._nextReceivingSequenceId;return this._nextReceivingSequenceId++,t<=this._latestReceivedSequenceId?(t===this._latestReceivedSequenceId&&this._ackTimer(),!1):(this._latestReceivedSequenceId=t,this._ackTimer(),!0)}_resetSequence(e){if(e.sequenceId>this._nextReceivingSequenceId){this._connection.stop(new Error("Sequence ID greater than amount of messages we've received."));return}this._nextReceivingSequenceId=e.sequenceId}_disconnected(){this._reconnectInProgress=!0,this._waitForSequenceMessage=!0}async _resend(){const e=this._messages.length!==0?this._messages[0]._id:this._totalMessageCount+1;await this._connection.send(this._protocol.writeMessage({type:f.Sequence,sequenceId:e}));const t=this._messages;for(const n of t)await this._connection.send(n._message);this._reconnectInProgress=!1}_dispose(e){e??(e=new Error("Unable to reconnect to server."));for(const t of this._messages)t._rejector(e)}_isInvocationMessage(e){switch(e.type){case f.Invocation:case f.StreamItem:case f.Completion:case f.StreamInvocation:case f.CancelInvocation:return!0;case f.Close:case f.Sequence:case f.Ping:case f.Ack:return!1}}_ackTimer(){this._ackTimerHandle===void 0&&(this._ackTimerHandle=setTimeout(async()=>{try{this._reconnectInProgress||await this._connection.send(this._protocol.writeMessage({type:f.Ack,sequenceId:this._latestReceivedSequenceId}))}catch{}clearTimeout(this._ackTimerHandle),this._ackTimerHandle=void 0},1e3))}}class Lt{constructor(e,t,n,o){this._message=e,this._id=t,this._resolver=n,this._rejector=o}}const Bt=30*1e3,Ft=15*1e3,qt=1e5;var p;(function(s){s.Disconnected="Disconnected",s.Connecting="Connecting",s.Connected="Connected",s.Disconnecting="Disconnecting",s.Reconnecting="Reconnecting"})(p||(p={}));class Te{static create(e,t,n,o,r,i,a){return new Te(e,t,n,o,r,i,a)}constructor(e,t,n,o,r,i,a){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(c.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},y.isRequired(e,"connection"),y.isRequired(t,"logger"),y.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=r??Bt,this.keepAliveIntervalInMilliseconds=i??Ft,this._statefulReconnectBufferSize=a??qt,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=o,this._handshakeProtocol=new Wt,this.connection.onreceive=l=>this._processIncomingData(l),this.connection.onclose=l=>this._connectionClosed(l),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=p.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:f.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==p.Disconnected&&this._connectionState!==p.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==p.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=p.Connecting,this._logger.log(c.Debug,"Starting HubConnection.");try{await this._startInternal(),w.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=p.Connected,this._connectionStarted=!0,this._logger.log(c.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=p.Disconnected,this._logger.log(c.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise((t,n)=>{this._handshakeResolver=t,this._handshakeRejecter=n});await this.connection.start(this._protocol.transferFormat);try{let t=this._protocol.version;this.connection.features.reconnect||(t=1);const n={protocol:this._protocol.name,version:t};if(this._logger.log(c.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(n)),this._logger.log(c.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;(this.connection.features.reconnect||!1)&&(this._messageBuffer=new jt(this._protocol,this.connection,this._statefulReconnectBufferSize),this.connection.features.disconnected=this._messageBuffer._disconnected.bind(this._messageBuffer),this.connection.features.resend=()=>{if(this._messageBuffer)return this._messageBuffer._resend()}),this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(t){throw this._logger.log(c.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const e=this._startPromise;this.connection.features.reconnect=!1,this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch{}}_stopInternal(e){if(this._connectionState===p.Disconnected)return this._logger.log(c.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===p.Disconnecting)return this._logger.log(c.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const t=this._connectionState;return this._connectionState=p.Disconnecting,this._logger.log(c.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(c.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(t===p.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new P("The connection was stopped before the hub handshake could complete."),this.connection.stop(e))}async _sendCloseMessage(){try{await this._sendWithProtocol(this._createCloseMessage())}catch{}}stream(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._createStreamInvocation(e,t,o);let i;const a=new Nt;return a.cancelCallback=()=>{const l=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],i.then(()=>this._sendWithProtocol(l))},this._callbacks[r.invocationId]=(l,d)=>{if(d){a.error(d);return}else l&&(l.type===f.Completion?l.error?a.error(new Error(l.error)):a.complete():a.next(l.item))},i=this._sendWithProtocol(r).catch(l=>{a.error(l),delete this._callbacks[r.invocationId]}),this._launchStreams(n,i),a}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._messageBuffer?this._messageBuffer._send(e):this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._sendWithProtocol(this._createInvocation(e,t,!0,o));return this._launchStreams(n,r),r}invoke(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._createInvocation(e,t,!1,o);return new Promise((a,l)=>{this._callbacks[r.invocationId]=(u,k)=>{if(k){l(k);return}else u&&(u.type===f.Completion?u.error?l(new Error(u.error)):a(u.result):l(new Error(`Unexpected message type: ${u.type}`)))};const d=this._sendWithProtocol(r).catch(u=>{l(u),delete this._callbacks[r.invocationId]});this._launchStreams(n,d)})}on(e,t){!e||!t||(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),this._methods[e].indexOf(t)===-1&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const o=n.indexOf(t);o!==-1&&(n.splice(o,1),n.length===0&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const n of t)if(!(this._messageBuffer&&!this._messageBuffer._shouldProcessMessage(n)))switch(n.type){case f.Invocation:this._invokeClientMethod(n);break;case f.StreamItem:case f.Completion:{const o=this._callbacks[n.invocationId];if(o){n.type===f.Completion&&delete this._callbacks[n.invocationId];try{o(n)}catch(r){this._logger.log(c.Error,`Stream callback threw error: ${We(r)}`)}}break}case f.Ping:break;case f.Close:{this._logger.log(c.Information,"Close message received from server.");const o=n.error?new Error("Server returned an error on close: "+n.error):void 0;n.allowReconnect===!0?this.connection.stop(o):this._stopPromise=this._stopInternal(o);break}case f.Ack:this._messageBuffer&&this._messageBuffer._ack(n);break;case f.Sequence:this._messageBuffer&&this._messageBuffer._resetSequence(n);break;default:this._logger.log(c.Warning,`Invalid message type: ${n.type}.`);break}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(o){const r="Error parsing handshake response: "+o;this._logger.log(c.Error,r);const i=new Error(r);throw this._handshakeRejecter(i),i}if(t.error){const o="Server returned handshake error: "+t.error;this._logger.log(c.Error,o);const r=new Error(o);throw this._handshakeRejecter(r),r}else this._logger.log(c.Debug,"Server handshake complete.");return this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=new Date().getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if((!this.connection.features||!this.connection.features.inherentKeepAlive)&&(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),this._pingServerHandle===void 0)){let e=this._nextKeepAlive-new Date().getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===p.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n){this._logger.log(c.Warning,`No client method with the name '${t}' found.`),e.invocationId&&(this._logger.log(c.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)));return}const o=n.slice(),r=!!e.invocationId;let i,a,l;for(const d of o)try{const u=i;i=await d.apply(this,e.arguments),r&&i&&u&&(this._logger.log(c.Error,`Multiple results provided for '${t}'. Sending error to server.`),l=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),a=void 0}catch(u){a=u,this._logger.log(c.Error,`A callback for the method '${t}' threw error '${u}'.`)}l?await this._sendWithProtocol(l):r?(a?l=this._createCompletionMessage(e.invocationId,`${a}`,null):i!==void 0?l=this._createCompletionMessage(e.invocationId,null,i):(this._logger.log(c.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),l=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(l)):i&&this._logger.log(c.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(c.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new P("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===p.Disconnecting?this._completeClose(e):this._connectionState===p.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===p.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=p.Disconnected,this._connectionStarted=!1,this._messageBuffer&&(this._messageBuffer._dispose(e??new Error("Connection closed.")),this._messageBuffer=void 0),w.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(c.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,o=e!==void 0?e:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(n++,0,o);if(r===null){this._logger.log(c.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this._completeClose(e);return}if(this._connectionState=p.Reconnecting,e?this._logger.log(c.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(c.Information,"Connection reconnecting."),this._reconnectingCallbacks.length!==0){try{this._reconnectingCallbacks.forEach(i=>i.apply(this,[e]))}catch(i){this._logger.log(c.Error,`An onreconnecting callback called with error '${e}' threw error '${i}'.`)}if(this._connectionState!==p.Reconnecting){this._logger.log(c.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");return}}for(;r!==null;){if(this._logger.log(c.Information,`Reconnect attempt number ${n} will start in ${r} ms.`),await new Promise(i=>{this._reconnectDelayHandle=setTimeout(i,r)}),this._reconnectDelayHandle=void 0,this._connectionState!==p.Reconnecting){this._logger.log(c.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");return}try{if(await this._startInternal(),this._connectionState=p.Connected,this._logger.log(c.Information,"HubConnection reconnected successfully."),this._reconnectedCallbacks.length!==0)try{this._reconnectedCallbacks.forEach(i=>i.apply(this,[this.connection.connectionId]))}catch(i){this._logger.log(c.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${i}'.`)}return}catch(i){if(this._logger.log(c.Information,`Reconnect attempt failed because of error '${i}'.`),this._connectionState!==p.Reconnecting){this._logger.log(c.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),this._connectionState===p.Disconnecting&&this._completeClose();return}o=i instanceof Error?i:new Error(i.toString()),r=this._getNextRetryDelay(n++,Date.now()-t,o)}}this._logger.log(c.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(o){return this._logger.log(c.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${o}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach(n=>{const o=t[n];try{o(null,e)}catch(r){this._logger.log(c.Error,`Stream 'error' callback called with '${e}' threw error: ${We(r)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,o){if(n)return o.length!==0?{arguments:t,streamIds:o,target:e,type:f.Invocation}:{arguments:t,target:e,type:f.Invocation};{const r=this._invocationId;return this._invocationId++,o.length!==0?{arguments:t,invocationId:r.toString(),streamIds:o,target:e,type:f.Invocation}:{arguments:t,invocationId:r.toString(),target:e,type:f.Invocation}}}_launchStreams(e,t){if(e.length!==0){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:o=>{let r;o instanceof Error?r=o.message:o&&o.toString?r=o.toString():r="Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,r)))},next:o=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,o)))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let o=0;o<e.length;o++){const r=e[o];if(this._isObservable(r)){const i=this._invocationId;this._invocationId++,t[i]=r,n.push(i.toString()),e.splice(o,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&typeof e.subscribe=="function"}_createStreamInvocation(e,t,n){const o=this._invocationId;return this._invocationId++,n.length!==0?{arguments:t,invocationId:o.toString(),streamIds:n,target:e,type:f.StreamInvocation}:{arguments:t,invocationId:o.toString(),target:e,type:f.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:f.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:f.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:f.Completion}:{invocationId:e,result:n,type:f.Completion}}_createCloseMessage(){return{type:f.Close}}}const zt=[0,2e3,1e4,3e4,null];class je{constructor(e){this._retryDelays=e!==void 0?[...e,null]:zt}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class j{}j.Authorization="Authorization";j.Cookie="Cookie";class Qt extends he{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=await this._innerClient.send(e);return t&&n.statusCode===401&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):n}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[j.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[j.Authorization]&&delete e.headers[j.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var S;(function(s){s[s.None=0]="None",s[s.WebSockets=1]="WebSockets",s[s.ServerSentEvents=2]="ServerSentEvents",s[s.LongPolling=4]="LongPolling"})(S||(S={}));var C;(function(s){s[s.Text=1]="Text",s[s.Binary=2]="Binary"})(C||(C={}));let Kt=class{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}};class Le{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new Kt,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}async connect(e,t){if(y.isRequired(e,"url"),y.isRequired(t,"transferFormat"),y.isIn(t,C,"transferFormat"),this._url=e,this._logger.log(c.Trace,"(LongPolling transport) Connecting."),t===C.Binary&&typeof XMLHttpRequest<"u"&&typeof new XMLHttpRequest().responseType!="string")throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,o]=Q(),r={[n]:o,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};t===C.Binary&&(i.responseType="arraybuffer");const a=`${e}&_=${Date.now()}`;this._logger.log(c.Trace,`(LongPolling transport) polling: ${a}.`);const l=await this._httpClient.get(a,i);l.statusCode!==200?(this._logger.log(c.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new N(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _poll(e,t){try{for(;this._running;)try{const n=`${e}&_=${Date.now()}`;this._logger.log(c.Trace,`(LongPolling transport) polling: ${n}.`);const o=await this._httpClient.get(n,t);o.statusCode===204?(this._logger.log(c.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):o.statusCode!==200?(this._logger.log(c.Error,`(LongPolling transport) Unexpected response code: ${o.statusCode}.`),this._closeError=new N(o.statusText||"",o.statusCode),this._running=!1):o.content?(this._logger.log(c.Trace,`(LongPolling transport) data received. ${G(o.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(o.content)):this._logger.log(c.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(n){this._running?n instanceof Ie?this._logger.log(c.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=n,this._running=!1):this._logger.log(c.Trace,`(LongPolling transport) Poll errored after shutdown: ${n.message}`)}}finally{this._logger.log(c.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?Ve(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(c.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(c.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,n]=Q();e[t]=n;const o={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};let r;try{await this._httpClient.delete(this._url,o)}catch(i){r=i}r?r instanceof N&&(r.statusCode===404?this._logger.log(c.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(c.Trace,`(LongPolling transport) Error sending a DELETE request: ${r}`)):this._logger.log(c.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(c.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(c.Trace,e),this.onclose(this._closeError)}}}class Vt{constructor(e,t,n,o){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}async connect(e,t){return y.isRequired(e,"url"),y.isRequired(t,"transferFormat"),y.isIn(t,C,"transferFormat"),this._logger.log(c.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((n,o)=>{let r=!1;if(t!==C.Text){o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));return}let i;if(w.isBrowser||w.isWebWorker)i=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const a=this._httpClient.getCookieString(e),l={};l.Cookie=a;const[d,u]=Q();l[d]=u,i=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...l,...this._options.headers}})}try{i.onmessage=a=>{if(this.onreceive)try{this._logger.log(c.Trace,`(SSE transport) data received. ${G(a.data,this._options.logMessageContent)}.`),this.onreceive(a.data)}catch(l){this._close(l);return}},i.onerror=a=>{r?this._close():o(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},i.onopen=()=>{this._logger.log(c.Information,`SSE connected to ${this._url}`),this._eventSource=i,r=!0,n()}}catch(a){o(a);return}})}async send(e){return this._eventSource?Ve(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class Xt{constructor(e,t,n,o,r,i){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=o,this._webSocketConstructor=r,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=i}async connect(e,t){y.isRequired(e,"url"),y.isRequired(t,"transferFormat"),y.isIn(t,C,"transferFormat"),this._logger.log(c.Trace,"(WebSockets transport) Connecting.");let n;return this._accessTokenFactory&&(n=await this._accessTokenFactory()),new Promise((o,r)=>{e=e.replace(/^http/,"ws");let i;const a=this._httpClient.getCookieString(e);let l=!1;if(w.isNode||w.isReactNative){const d={},[u,k]=Q();d[u]=k,n&&(d[j.Authorization]=`Bearer ${n}`),a&&(d[j.Cookie]=a),i=new this._webSocketConstructor(e,void 0,{headers:{...d,...this._headers}})}else n&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(n)}`);i||(i=new this._webSocketConstructor(e)),t===C.Binary&&(i.binaryType="arraybuffer"),i.onopen=d=>{this._logger.log(c.Information,`WebSocket connected to ${e}.`),this._webSocket=i,l=!0,o()},i.onerror=d=>{let u=null;typeof ErrorEvent<"u"&&d instanceof ErrorEvent?u=d.error:u="There was an error with the transport",this._logger.log(c.Information,`(WebSockets transport) ${u}.`)},i.onmessage=d=>{if(this._logger.log(c.Trace,`(WebSockets transport) data received. ${G(d.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(d.data)}catch(u){this._close(u);return}},i.onclose=d=>{if(l)this._close(d);else{let u=null;typeof ErrorEvent<"u"&&d instanceof ErrorEvent?u=d.error:u="WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",r(new Error(u))}}})}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(c.Trace,`(WebSockets transport) sending data. ${G(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(c.Trace,"(WebSockets transport) socket closed."),this.onclose&&(this._isCloseEvent(e)&&(e.wasClean===!1||e.code!==1e3)?this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)):e instanceof Error?this.onclose(e):this.onclose())}_isCloseEvent(e){return e&&typeof e.wasClean=="boolean"&&typeof e.code=="number"}}const Be=100;class Jt{constructor(e,t={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,y.isRequired(e,"url"),this._logger=Et(t.logger),this.baseUrl=this._resolveUrl(e),t=t||{},t.logMessageContent=t.logMessageContent===void 0?!1:t.logMessageContent,typeof t.withCredentials=="boolean"||t.withCredentials===void 0)t.withCredentials=t.withCredentials===void 0?!0:t.withCredentials;else throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.timeout=t.timeout===void 0?100*1e3:t.timeout;let n=null,o=null;w.isNode&&typeof require<"u"&&(n=At(),o=Mt()),!w.isNode&&typeof WebSocket<"u"&&!t.WebSocket?t.WebSocket=WebSocket:w.isNode&&!t.WebSocket&&n&&(t.WebSocket=n),!w.isNode&&typeof EventSource<"u"&&!t.EventSource?t.EventSource=EventSource:w.isNode&&!t.EventSource&&typeof o<"u"&&(t.EventSource=o),this._httpClient=new Qt(t.httpClient||new Ut(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||C.Binary,y.isIn(e,C,"transferFormat"),this._logger.log(c.Debug,`Starting connection with transfer format '${C[e]}'.`),this._connectionState!=="Disconnected")return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,this._connectionState==="Disconnecting"){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(c.Error,t),await this._stopPromise,Promise.reject(new P(t))}else if(this._connectionState!=="Connected"){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(c.Error,t),Promise.reject(new P(t))}this._connectionStarted=!0}send(e){return this._connectionState!=="Connected"?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new Re(this.transport)),this._sendQueue.send(e))}async stop(e){if(this._connectionState==="Disconnected")return this._logger.log(c.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve();if(this._connectionState==="Disconnecting")return this._logger.log(c.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(e),await this._stopPromise}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch{}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(c.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(c.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation)if(this._options.transport===S.WebSockets)this.transport=this._constructTransport(S.WebSockets),await this._startTransport(t,e);else throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");else{let n=null,o=0;do{if(n=await this._getNegotiationResponse(t),this._connectionState==="Disconnecting"||this._connectionState==="Disconnected")throw new P("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const r=n.accessToken;this._accessTokenFactory=()=>r,this._httpClient._accessToken=r,this._httpClient._accessTokenFactory=void 0}o++}while(n.url&&o<Be);if(o===Be&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,n,e)}this.transport instanceof Le&&(this.features.inherentKeepAlive=!0),this._connectionState==="Connecting"&&(this._logger.log(c.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(n){return this._logger.log(c.Error,"Failed to start the connection: "+n),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(n)}}async _getNegotiationResponse(e){const t={},[n,o]=Q();t[n]=o;const r=this._resolveNegotiateUrl(e);this._logger.log(c.Debug,`Sending negotiation request: ${r}.`);try{const i=await this._httpClient.post(r,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(i.statusCode!==200)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${i.statusCode}'`));const a=JSON.parse(i.content);return(!a.negotiateVersion||a.negotiateVersion<1)&&(a.connectionToken=a.connectionId),a.useStatefulReconnect&&this._options._useStatefulReconnect!==!0?Promise.reject(new Ue("Client didn't negotiate Stateful Reconnect but the server did.")):a}catch(i){let a="Failed to complete negotiation with the server: "+i;return i instanceof N&&i.statusCode===404&&(a=a+" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(c.Error,a),Promise.reject(new Ue(a))}}_createConnectUrl(e,t){return t?e+(e.indexOf("?")===-1?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,o){let r=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t)){this._logger.log(c.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(r,o),this.connectionId=n.connectionId;return}const i=[],a=n.availableTransports||[];let l=n;for(const d of a){const u=this._resolveTransportOrError(d,t,o,(l==null?void 0:l.useStatefulReconnect)===!0);if(u instanceof Error)i.push(`${d.transport} failed:`),i.push(u);else if(this._isITransport(u)){if(this.transport=u,!l){try{l=await this._getNegotiationResponse(e)}catch(k){return Promise.reject(k)}r=this._createConnectUrl(e,l.connectionToken)}try{await this._startTransport(r,o),this.connectionId=l.connectionId;return}catch(k){if(this._logger.log(c.Error,`Failed to start the transport '${d.transport}': ${k}`),l=void 0,i.push(new yt(`${d.transport} failed: ${k}`,S[d.transport])),this._connectionState!=="Connecting"){const K="Failed to select transport before stop() was called.";return this._logger.log(c.Debug,K),Promise.reject(new P(K))}}}}return i.length>0?Promise.reject(new St(`Unable to connect to the server with any of the available transports. ${i.join(" ")}`,i)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case S.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new Xt(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case S.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new Vt(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case S.LongPolling:return new Le(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.features.reconnect?this.transport.onclose=async n=>{let o=!1;if(this.features.reconnect)try{this.features.disconnected(),await this.transport.connect(e,t),await this.features.resend()}catch{o=!0}else{this._stopConnection(n);return}o&&this._stopConnection(n)}:this.transport.onclose=n=>this._stopConnection(n),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n,o){const r=S[e.transport];if(r==null)return this._logger.log(c.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(Gt(t,r))if(e.transferFormats.map(a=>C[a]).indexOf(n)>=0){if(r===S.WebSockets&&!this._options.WebSocket||r===S.ServerSentEvents&&!this._options.EventSource)return this._logger.log(c.Debug,`Skipping transport '${S[r]}' because it is not supported in your environment.'`),new wt(`'${S[r]}' is not supported in your environment.`,r);this._logger.log(c.Debug,`Selecting transport '${S[r]}'.`);try{return this.features.reconnect=r===S.WebSockets?o:void 0,this._constructTransport(r)}catch(a){return a}}else return this._logger.log(c.Debug,`Skipping transport '${S[r]}' because it does not support the requested transfer format '${C[n]}'.`),new Error(`'${S[r]}' does not support ${C[n]}.`);else return this._logger.log(c.Debug,`Skipping transport '${S[r]}' because it was disabled by the client.`),new bt(`'${S[r]}' is disabled by the client.`,r)}_isITransport(e){return e&&typeof e=="object"&&"connect"in e}_stopConnection(e){if(this._logger.log(c.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,this._connectionState==="Disconnected"){this._logger.log(c.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`);return}if(this._connectionState==="Connecting")throw this._logger.log(c.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if(this._connectionState==="Disconnecting"&&this._stopPromiseResolver(),e?this._logger.log(c.Error,`Connection disconnected with error '${e}'.`):this._logger.log(c.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(c.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(c.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}_resolveUrl(e){if(e.lastIndexOf("https://",0)===0||e.lastIndexOf("http://",0)===0)return e;if(!w.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(c.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=new URL(e);t.pathname.endsWith("/")?t.pathname+="negotiate":t.pathname+="/negotiate";const n=new URLSearchParams(t.searchParams);return n.has("negotiateVersion")||n.append("negotiateVersion",this._negotiateVersion.toString()),n.has("useStatefulReconnect")?n.get("useStatefulReconnect")==="true"&&(this._options._useStatefulReconnect=!0):this._options._useStatefulReconnect===!0&&n.append("useStatefulReconnect","true"),t.search=n.toString(),t.toString()}}function Gt(s,e){return!s||(e&s)!==0}class Re{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new ce,this._transportResult=new ce,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new ce),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new ce;const e=this._transportResult;this._transportResult=void 0;const t=typeof this._buffer[0]=="string"?this._buffer.join(""):Re._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(n){e.reject(n)}}}static _concatBuffers(e){const t=e.map(r=>r.byteLength).reduce((r,i)=>r+i),n=new Uint8Array(t);let o=0;for(const r of e)n.set(new Uint8Array(r),o),o+=r.byteLength;return n.buffer}}class ce{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}const Yt="json";class Zt{constructor(){this.name=Yt,this.version=2,this.transferFormat=C.Text}parseMessages(e,t){if(typeof e!="string")throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];t===null&&(t=J.instance);const n=T.parse(e),o=[];for(const r of n){const i=JSON.parse(r);if(typeof i.type!="number")throw new Error("Invalid payload.");switch(i.type){case f.Invocation:this._isInvocationMessage(i);break;case f.StreamItem:this._isStreamItemMessage(i);break;case f.Completion:this._isCompletionMessage(i);break;case f.Ping:break;case f.Close:break;case f.Ack:this._isAckMessage(i);break;case f.Sequence:this._isSequenceMessage(i);break;default:t.log(c.Information,"Unknown message type '"+i.type+"' ignored.");continue}o.push(i)}return o}writeMessage(e){return T.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),e.invocationId!==void 0&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),e.item===void 0)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_isAckMessage(e){if(typeof e.sequenceId!="number")throw new Error("Invalid SequenceId for Ack message.")}_isSequenceMessage(e){if(typeof e.sequenceId!="number")throw new Error("Invalid SequenceId for Sequence message.")}_assertNotEmptyString(e,t){if(typeof e!="string"||e==="")throw new Error(t)}}const en={trace:c.Trace,debug:c.Debug,info:c.Information,information:c.Information,warn:c.Warning,warning:c.Warning,error:c.Error,critical:c.Critical,none:c.None};function tn(s){const e=en[s.toLowerCase()];if(typeof e<"u")return e;throw new Error(`Unknown log level: ${s}`)}class nn{configureLogging(e){if(y.isRequired(e,"logging"),sn(e))this.logger=e;else if(typeof e=="string"){const t=tn(e);this.logger=new ae(t)}else this.logger=new ae(e);return this}withUrl(e,t){return y.isRequired(e,"url"),y.isNotEmpty(e,"url"),this.url=e,typeof t=="object"?this.httpConnectionOptions={...this.httpConnectionOptions,...t}:this.httpConnectionOptions={...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return y.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new je(e):this.reconnectPolicy=e:this.reconnectPolicy=new je,this}withServerTimeout(e){return y.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return y.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}withStatefulReconnect(e){return this.httpConnectionOptions===void 0&&(this.httpConnectionOptions={}),this.httpConnectionOptions._useStatefulReconnect=!0,this._statefulReconnectBufferSize=e==null?void 0:e.bufferSize,this}build(){const e=this.httpConnectionOptions||{};if(e.logger===void 0&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new Jt(this.url,e);return Te.create(t,this.logger||J.instance,this.protocol||new Zt,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds,this._statefulReconnectBufferSize)}}function sn(s){return s.log!==void 0}function on(s){const[e,t]=I.useState(void 0);return I.useEffect(()=>{let n=!1;const o=new nn().withUrl(s).withAutomaticReconnect().configureLogging(c.Information).build();return o.start().then(()=>{n||t(o)}).catch(r=>{console.log("signal error",r)}),o.onclose(()=>{n||(console.log("signal closed"),t(void 0))}),o.onreconnecting(()=>{n||(console.log("signal reconnecting"),t(void 0))}),o.onreconnected(()=>{n||(console.log("signal reconnected"),t(o))}),()=>{n=!0,o.stop()}},[]),{connection:e}}async function rn(){return await(await fetch("/api/Movies")).json()}const dn=function(){const{connection:e}=on("/r/MovieHub");I.useEffect(()=>{e&&e.on("MovieAdded",i=>{console.log("MovieAdded",i)})},[e]);const t=i=>{window.confirm("Are you sure you want to delete this movie?")&&(console.log("delete"),fetch(`/api/movies/${i}`,{method:"DELETE"}).then(l=>{l.ok}).catch(l=>{console.error("Error deleting movie:",l)}))},{isPending:n,error:o,data:r}=mt({queryKey:["movies"],queryFn:rn});return I.useEffect(()=>(e&&e.on("MovieAdded",i=>{console.log("MovieAdded",i)}),()=>{e&&e.off("MovieAdded")}),[e]),$.jsxs($.Fragment,{children:[$.jsx("h1",{children:"Movie Ratings"}),$.jsx("h2",{children:"Here's my list of Movies"}),n?$.jsx("p",{children:"Loading..."}):o?$.jsx("p",{children:"Error: try again later"}):r.map(i=>$.jsxs("div",{children:[$.jsx("h2",{children:i.title}),$.jsxs("p",{children:["Rated: ",i.rating,"/5"]}),$.jsx("button",{onClick:()=>t(i.id),children:"Delete"})]},i.id))]})};export{dn as component};
